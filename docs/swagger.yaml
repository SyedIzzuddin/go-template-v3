basePath: /api/v1
definitions:
  dto.AuthResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - name
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  dto.ValidationError:
    properties:
      field:
        type: string
      message:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
  pagination.PaginationMeta:
    properties:
      current_page:
        type: integer
      has_next:
        type: boolean
      has_prev:
        type: boolean
      per_page:
        type: integer
      total_pages:
        type: integer
      total_records:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      pagination:
        $ref: '#/definitions/pagination.PaginationMeta'
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://localhost:8080/support
  description: A production-ready, scalable Go REST API template with JWT authentication,
    RBAC, email verification, password reset, and comprehensive security features.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://localhost:8080/terms/
  title: Go REST API Template
  version: "3.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT tokens
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Validation error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  items:
                    $ref: '#/definitions/dto.ValidationError'
                  type: array
              type: object
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserProfileResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password. Default role is 'user'.
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Validation error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  items:
                    $ref: '#/definitions/dto.ValidationError'
                  type: array
              type: object
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - Authentication
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users with optional filtering and search.
        Requires moderator or admin role.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Sort field: id, name, email, created_at, role (default: id)'
        in: query
        name: sort
        type: string
      - description: 'Sort order: ASC, DESC (default: DESC)'
        in: query
        name: order
        type: string
      - description: Search in name and email
        in: query
        name: search
        type: string
      - description: Filter by name (partial match)
        in: query
        name: name
        type: string
      - description: Filter by email (partial match)
        in: query
        name: email
        type: string
      - description: Filter by role (exact match)
        in: query
        name: role
        type: string
      - description: Filter by email verification status
        in: query
        name: email_verified
        type: boolean
      - description: Filter by creation date (RFC3339 format)
        in: query
        name: created_after
        type: string
      - description: Filter by creation date (RFC3339 format)
        in: query
        name: created_before
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
                pagination:
                  $ref: '#/definitions/pagination.PaginationMeta'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Moderator+ access required
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all users with pagination and filtering (Moderator+ only)
      tags:
      - User Management
    post:
      consumes:
      - application/json
      description: Create a new user. Requires admin role.
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Validation error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  items:
                    $ref: '#/definitions/dto.ValidationError'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new user (Admin only)
      tags:
      - User Management
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication and authorization endpoints
  name: Authentication
- description: User management endpoints with RBAC protection
  name: User Management
- description: File upload and management endpoints
  name: File Management
- description: Health check endpoints
  name: Health
