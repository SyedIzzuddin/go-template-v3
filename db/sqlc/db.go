// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countFilesStmt, err = db.PrepareContext(ctx, countFiles); err != nil {
		return nil, fmt.Errorf("error preparing query CountFiles: %w", err)
	}
	if q.countFilesByUserStmt, err = db.PrepareContext(ctx, countFilesByUser); err != nil {
		return nil, fmt.Errorf("error preparing query CountFilesByUser: %w", err)
	}
	if q.countFilesWithFiltersStmt, err = db.PrepareContext(ctx, countFilesWithFilters); err != nil {
		return nil, fmt.Errorf("error preparing query CountFilesWithFilters: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.countUsersWithFiltersStmt, err = db.PrepareContext(ctx, countUsersWithFilters); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsersWithFilters: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserWithPasswordStmt, err = db.PrepareContext(ctx, createUserWithPassword); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserWithPassword: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAllFilesStmt, err = db.PrepareContext(ctx, getAllFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllFiles: %w", err)
	}
	if q.getAllFilesWithPaginationAndFiltersStmt, err = db.PrepareContext(ctx, getAllFilesWithPaginationAndFilters); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllFilesWithPaginationAndFilters: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getFileStmt, err = db.PrepareContext(ctx, getFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetFile: %w", err)
	}
	if q.getFilesByUserStmt, err = db.PrepareContext(ctx, getFilesByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesByUser: %w", err)
	}
	if q.getFilesByUserWithPaginationStmt, err = db.PrepareContext(ctx, getFilesByUserWithPagination); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesByUserWithPagination: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByEmailWithPasswordStmt, err = db.PrepareContext(ctx, getUserByEmailWithPassword); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailWithPassword: %w", err)
	}
	if q.getUserByPasswordResetTokenStmt, err = db.PrepareContext(ctx, getUserByPasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPasswordResetToken: %w", err)
	}
	if q.getUserByVerificationTokenStmt, err = db.PrepareContext(ctx, getUserByVerificationToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByVerificationToken: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listUsersWithPaginationAndFiltersStmt, err = db.PrepareContext(ctx, listUsersWithPaginationAndFilters); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsersWithPaginationAndFilters: %w", err)
	}
	if q.resetPasswordStmt, err = db.PrepareContext(ctx, resetPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetPassword: %w", err)
	}
	if q.updateEmailVerificationStmt, err = db.PrepareContext(ctx, updateEmailVerification); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEmailVerification: %w", err)
	}
	if q.updateEmailVerificationTokenStmt, err = db.PrepareContext(ctx, updateEmailVerificationToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEmailVerificationToken: %w", err)
	}
	if q.updateFileStmt, err = db.PrepareContext(ctx, updateFile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFile: %w", err)
	}
	if q.updatePasswordResetTokenStmt, err = db.PrepareContext(ctx, updatePasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePasswordResetToken: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateVerificationTokenStmt, err = db.PrepareContext(ctx, updateVerificationToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVerificationToken: %w", err)
	}
	if q.verifyEmailByTokenStmt, err = db.PrepareContext(ctx, verifyEmailByToken); err != nil {
		return nil, fmt.Errorf("error preparing query VerifyEmailByToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countFilesStmt != nil {
		if cerr := q.countFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFilesStmt: %w", cerr)
		}
	}
	if q.countFilesByUserStmt != nil {
		if cerr := q.countFilesByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFilesByUserStmt: %w", cerr)
		}
	}
	if q.countFilesWithFiltersStmt != nil {
		if cerr := q.countFilesWithFiltersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFilesWithFiltersStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.countUsersWithFiltersStmt != nil {
		if cerr := q.countUsersWithFiltersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersWithFiltersStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserWithPasswordStmt != nil {
		if cerr := q.createUserWithPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserWithPasswordStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAllFilesStmt != nil {
		if cerr := q.getAllFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllFilesStmt: %w", cerr)
		}
	}
	if q.getAllFilesWithPaginationAndFiltersStmt != nil {
		if cerr := q.getAllFilesWithPaginationAndFiltersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllFilesWithPaginationAndFiltersStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getFileStmt != nil {
		if cerr := q.getFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileStmt: %w", cerr)
		}
	}
	if q.getFilesByUserStmt != nil {
		if cerr := q.getFilesByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesByUserStmt: %w", cerr)
		}
	}
	if q.getFilesByUserWithPaginationStmt != nil {
		if cerr := q.getFilesByUserWithPaginationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesByUserWithPaginationStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByEmailWithPasswordStmt != nil {
		if cerr := q.getUserByEmailWithPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailWithPasswordStmt: %w", cerr)
		}
	}
	if q.getUserByPasswordResetTokenStmt != nil {
		if cerr := q.getUserByPasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.getUserByVerificationTokenStmt != nil {
		if cerr := q.getUserByVerificationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByVerificationTokenStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listUsersWithPaginationAndFiltersStmt != nil {
		if cerr := q.listUsersWithPaginationAndFiltersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersWithPaginationAndFiltersStmt: %w", cerr)
		}
	}
	if q.resetPasswordStmt != nil {
		if cerr := q.resetPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetPasswordStmt: %w", cerr)
		}
	}
	if q.updateEmailVerificationStmt != nil {
		if cerr := q.updateEmailVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEmailVerificationStmt: %w", cerr)
		}
	}
	if q.updateEmailVerificationTokenStmt != nil {
		if cerr := q.updateEmailVerificationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEmailVerificationTokenStmt: %w", cerr)
		}
	}
	if q.updateFileStmt != nil {
		if cerr := q.updateFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFileStmt: %w", cerr)
		}
	}
	if q.updatePasswordResetTokenStmt != nil {
		if cerr := q.updatePasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateVerificationTokenStmt != nil {
		if cerr := q.updateVerificationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVerificationTokenStmt: %w", cerr)
		}
	}
	if q.verifyEmailByTokenStmt != nil {
		if cerr := q.verifyEmailByTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifyEmailByTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	countFilesStmt                          *sql.Stmt
	countFilesByUserStmt                    *sql.Stmt
	countFilesWithFiltersStmt               *sql.Stmt
	countUsersStmt                          *sql.Stmt
	countUsersWithFiltersStmt               *sql.Stmt
	createFileStmt                          *sql.Stmt
	createUserStmt                          *sql.Stmt
	createUserWithPasswordStmt              *sql.Stmt
	deleteFileStmt                          *sql.Stmt
	deleteUserStmt                          *sql.Stmt
	getAllFilesStmt                         *sql.Stmt
	getAllFilesWithPaginationAndFiltersStmt *sql.Stmt
	getAllUsersStmt                         *sql.Stmt
	getFileStmt                             *sql.Stmt
	getFilesByUserStmt                      *sql.Stmt
	getFilesByUserWithPaginationStmt        *sql.Stmt
	getUserStmt                             *sql.Stmt
	getUserByEmailStmt                      *sql.Stmt
	getUserByEmailWithPasswordStmt          *sql.Stmt
	getUserByPasswordResetTokenStmt         *sql.Stmt
	getUserByVerificationTokenStmt          *sql.Stmt
	listUsersStmt                           *sql.Stmt
	listUsersWithPaginationAndFiltersStmt   *sql.Stmt
	resetPasswordStmt                       *sql.Stmt
	updateEmailVerificationStmt             *sql.Stmt
	updateEmailVerificationTokenStmt        *sql.Stmt
	updateFileStmt                          *sql.Stmt
	updatePasswordResetTokenStmt            *sql.Stmt
	updateUserStmt                          *sql.Stmt
	updateVerificationTokenStmt             *sql.Stmt
	verifyEmailByTokenStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		countFilesStmt:                          q.countFilesStmt,
		countFilesByUserStmt:                    q.countFilesByUserStmt,
		countFilesWithFiltersStmt:               q.countFilesWithFiltersStmt,
		countUsersStmt:                          q.countUsersStmt,
		countUsersWithFiltersStmt:               q.countUsersWithFiltersStmt,
		createFileStmt:                          q.createFileStmt,
		createUserStmt:                          q.createUserStmt,
		createUserWithPasswordStmt:              q.createUserWithPasswordStmt,
		deleteFileStmt:                          q.deleteFileStmt,
		deleteUserStmt:                          q.deleteUserStmt,
		getAllFilesStmt:                         q.getAllFilesStmt,
		getAllFilesWithPaginationAndFiltersStmt: q.getAllFilesWithPaginationAndFiltersStmt,
		getAllUsersStmt:                         q.getAllUsersStmt,
		getFileStmt:                             q.getFileStmt,
		getFilesByUserStmt:                      q.getFilesByUserStmt,
		getFilesByUserWithPaginationStmt:        q.getFilesByUserWithPaginationStmt,
		getUserStmt:                             q.getUserStmt,
		getUserByEmailStmt:                      q.getUserByEmailStmt,
		getUserByEmailWithPasswordStmt:          q.getUserByEmailWithPasswordStmt,
		getUserByPasswordResetTokenStmt:         q.getUserByPasswordResetTokenStmt,
		getUserByVerificationTokenStmt:          q.getUserByVerificationTokenStmt,
		listUsersStmt:                           q.listUsersStmt,
		listUsersWithPaginationAndFiltersStmt:   q.listUsersWithPaginationAndFiltersStmt,
		resetPasswordStmt:                       q.resetPasswordStmt,
		updateEmailVerificationStmt:             q.updateEmailVerificationStmt,
		updateEmailVerificationTokenStmt:        q.updateEmailVerificationTokenStmt,
		updateFileStmt:                          q.updateFileStmt,
		updatePasswordResetTokenStmt:            q.updatePasswordResetTokenStmt,
		updateUserStmt:                          q.updateUserStmt,
		updateVerificationTokenStmt:             q.updateVerificationTokenStmt,
		verifyEmailByTokenStmt:                  q.verifyEmailByTokenStmt,
	}
}
